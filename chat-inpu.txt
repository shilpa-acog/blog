	'use client';

	import React, { useState, useRef, useEffect } from 'react';

	import { useADKSession } from '@/contexts/adk-session';
	import { useApi } from '@/contexts/api-context';
	import { Textarea } from '@/components/ui/textarea';

	import DynamicForm from './components/dynamic-form';
	import SidePanel from './components/side-panel';
	import CollapsedSidebar from './components/collapsed-sidebar';
	import { Template } from './utils/templates';

	import {
		X,
		SendHorizonal,
		LoaderCircle,
		Paperclip,
		CheckCircle,
	} from 'lucide-react';

	import type { ContentInput } from '@/sdk';

	const ChatInput = ({ setNewMessage, isStreaming }: IChatInputProps) => {
		const api = useApi();
		const { adkSession } = useADKSession();

		const sidePanelRef = useRef<HTMLDivElement>(null);
		const fileInputRef = useRef<HTMLInputElement>(null);
		const textareaRef = useRef<HTMLTextAreaElement>(null);

		const [input, setInput] = useState('');
		const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
		const [isUploading, setIsUploading] = useState(false);
		const [showSuccessMessage, setShowSuccessMessage] = useState(false);

		const [showSidePanel, setShowSidePanel] = useState(false);
		const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(
			null
		);
		// Close side panel when clicking outside
		useEffect(() => {
			const handleClickOutside = (event: MouseEvent) => {
				if (
					showSidePanel &&
					sidePanelRef.current &&
					!sidePanelRef.current.contains(event.target as Node)
				) {
					setShowSidePanel(false);
				}
			};

			if (showSidePanel) {
				document.addEventListener('mousedown', handleClickOutside);
			}

			return () => {
				document.removeEventListener('mousedown', handleClickOutside);
			};
		}, [showSidePanel]);

		// Auto-hide success message after 3 seconds
		useEffect(() => {
			if (showSuccessMessage) {
				const timer = setTimeout(() => {
					setShowSuccessMessage(false);
				}, 3000);
				return () => clearTimeout(timer);
			}
		}, [showSuccessMessage]);

		const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
			setInput(e.target.value);
			if (textareaRef.current) {
				textareaRef.current.style.height = 'auto';
				textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
			}
		};

		const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
			if (!e.target.files || e.target.files.length === 0) return;

			const files = Array.from(e.target.files);
			setSelectedFiles((prev) => [...prev, ...files]);
		};

		const handleRemoveFile = (fileToRemove: File) => {
			setSelectedFiles(selectedFiles.filter((file) => file !== fileToRemove));
			if (fileInputRef.current) {
				fileInputRef.current.value = '';
			}
		};

		const handleAttachmentClick = () => {
			if (fileInputRef.current) {
				fileInputRef.current.value = '';
				fileInputRef.current.click();
			}
		};

		const handleSubmit = async (
			e:
				| React.FormEvent<HTMLFormElement>
				| React.KeyboardEvent<HTMLTextAreaElement>
		) => {
			e.preventDefault();

			if (isStreaming || isUploading) {
				console.log('Submit blocked: isStreaming or isUploading in progress', {
					isStreaming,
					isUploading,
				});
				return;
			}

			setIsUploading(true);

			try {
				if (selectedFiles.length > 0 && api && adkSession) {
					console.log('Preparing to upload files:', {
						appName: adkSession.appName,
						userId: adkSession.user_id,
						sessionId: adkSession.id,
						files: selectedFiles.map((f) => ({
							name: f.name,
							size: f.size,
							type: f.type,
						})),
					});

					const formData = new FormData();
					selectedFiles.forEach((file, index) => {
						console.log(`Appending file ${index + 1}: ${file.name}`);
						formData.append('file', file);
					});

					// const uploadResponse =
						await api.uploadFileAppsAppNameUsersUserIdSessionsSessionIdUploadPostRaw(
							{
								appName: adkSession.appName,
								userId: adkSession.userId,
								sessionId: adkSession.id,
								file: selectedFiles[0],
							}
						);

					setShowSuccessMessage(true);
				}

			let messageText = input.trim();

if (selectedFiles.length > 0) {
	messageText = `User uploaded ${selectedFiles.map((f) => f.name).join(', ')} and is asking the following question: ${input.trim()}`;
}

setNewMessage({
	role: 'user',
	parts: [{ text: messageText }],
});

				// Clear state
				setInput('');
				setSelectedFiles([]);

				if (textareaRef.current) {
					textareaRef.current.style.height = 'auto';
					textareaRef.current.focus();
				}
				if (fileInputRef.current) {
					fileInputRef.current.value = '';
				}
			} catch (error) {
				console.error('error while isUploading a file', error);
			} finally {
				setIsUploading(false);
				console.log('Upload process completed, isUploading state reset');
			}
		};

		const handleTemplateSelect = (template: Template) => {
			setSelectedTemplate(template);
			setShowSidePanel(false);
		};

		const handleFormSubmit = (query: string) => {
			setInput(query);
			setSelectedTemplate(null);

			if (textareaRef.current) {
				setTimeout(() => {
					if (textareaRef.current) {
						textareaRef.current.style.height = 'auto';
						textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
						textareaRef.current.focus();
					}
				}, 0);
			}
		};

		const toggleSidebar = () => {
			setShowSidePanel(!showSidePanel);
		};

		return (
			<div className='w-full py-2 bg-background z-20'>
				{/* Success message popup */}
				{showSuccessMessage && (
					<div className='fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg flex items-center gap-2 animate-in slide-in-from-top duration-300'>
						<CheckCircle size={16} />
						<span className='text-sm font-medium'>
							File{selectedFiles.length > 1 ? 's' : ''} uploaded successfully!
						</span>
					</div>
				)}

				{/* Collapsed sidebar */}
				{!showSidePanel && <CollapsedSidebar onToggle={toggleSidebar} />}

				{/* Selected files display */}
				{selectedFiles.length > 0 && (
					<div className='mb-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border space-y-2'>
						{selectedFiles.map((file, index) => (
							<div key={index} className='flex items-center justify-between'>
								<div className='flex items-center gap-3'>
									<div className='w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded flex items-center justify-center'>
										<Paperclip
											size={14}
											className='text-blue-600 dark:text-blue-400'
										/>
									</div>
									<div>
										<p className='text-sm font-medium text-gray-900 dark:text-gray-100'>
											{file.name}
										</p>
										<p className='text-xs text-gray-500 dark:text-gray-400'>
											{(file.size / 1024).toFixed(1)} KB
										</p>
									</div>
								</div>
								<button
									onClick={() => handleRemoveFile(file)}
									className='p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded transition-colors'
									aria-label={`Remove ${file.name}`}
								>
									<X size={14} className='text-gray-500 dark:text-gray-400' />
								</button>
							</div>
						))}
					</div>
				)}

				<form onSubmit={handleSubmit} className='relative flex flex-col gap-2'>
					<div className='relative flex items-end'>
						{/* Attachment icon button */}
						<button
							type='button'
							onClick={handleAttachmentClick}
							className={`absolute left-2 bottom-5 text-muted-foreground transition z-10 ${
								isUploading
									? 'cursor-not-allowed opacity-50'
									: 'cursor-pointer hover:text-foreground'
							}`}
							disabled={isUploading}
							aria-label='Upload files'
						>
							{isUploading ? (
								<LoaderCircle size={16} className='animate-spin' />
							) : (
								<Paperclip size={16} />
							)}
						</button>

						<Textarea
							id='chat-input'
							ref={textareaRef}
							onKeyDown={(e) => {
								if (e.key === 'Enter' && !e.shiftKey) {
									e.preventDefault();
									handleSubmit(e);
								}
							}}
							value={input}
							onChange={handleInputChange}
							placeholder='Type a message...'
							rows={1}
							className='w-full pl-10 pr-12 resize-none overflow-y-auto max-h-40 focus-visible:ring-0 focus-visible:border-border mb-3'
							disabled={isUploading}
						/>

						{/* File input */}
						<input
							type='file'
							ref={fileInputRef}
							style={{ display: 'none' }}
							onChange={handleFileChange}
							disabled={isUploading}
							multiple
						/>

						{/* Send button */}
						<button
							type='submit'
							className={`absolute right-4 bottom-5 text-muted-foreground transition ${
								isStreaming ||
								isUploading ||
								(!input.trim() && selectedFiles.length === 0)
									? 'cursor-not-allowed opacity-50'
									: 'cursor-pointer hover:text-foreground'
							}`}
							disabled={
								isStreaming ||
								isUploading ||
								(!input.trim() && selectedFiles.length === 0)
							}
							aria-label='Send message'
						>
							{isStreaming || isUploading ? (
								<LoaderCircle size={16} className='animate-spin' />
							) : (
								<SendHorizonal size={16} />
							)}
						</button>
					</div>
				</form>

				{/* Side panel */}
				{showSidePanel && (
					<SidePanel
						onSelectTemplate={handleTemplateSelect}
						onClose={() => setShowSidePanel(false)}
						panelRef={sidePanelRef}
					/>
				)}

				{selectedTemplate && (
					<DynamicForm
						template={selectedTemplate}
						onSubmit={handleFormSubmit}
						onClose={() => setSelectedTemplate(null)}
					/>
				)}

				<p className='mt-2 text-center text-xs'>
					Â© Copyright 2025 Aganitha AI Inc. All Rights Reserved.
				</p>
			</div>
		);
	};

	export default ChatInput;

	interface IChatInputProps {
		isStreaming: boolean;
		setNewMessage: React.Dispatch<React.SetStateAction<ContentInput | null>>;
	}
